// Code generated by protoc-gen-go. DO NOT EDIT.
// source: torreServer.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Runway struct {
	Runway               int32    `protobuf:"varint,1,opt,name=runway,proto3" json:"runway,omitempty"`
	AirportName          string   `protobuf:"bytes,2,opt,name=airportName,proto3" json:"airportName,omitempty"`
	PreCode              string   `protobuf:"bytes,3,opt,name=preCode,proto3" json:"preCode,omitempty"`
	Height               int32    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Runway) Reset()         { *m = Runway{} }
func (m *Runway) String() string { return proto.CompactTextString(m) }
func (*Runway) ProtoMessage()    {}
func (*Runway) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{1}
}

func (m *Runway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Runway.Unmarshal(m, b)
}
func (m *Runway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Runway.Marshal(b, m, deterministic)
}
func (m *Runway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Runway.Merge(m, src)
}
func (m *Runway) XXX_Size() int {
	return xxx_messageInfo_Runway.Size(m)
}
func (m *Runway) XXX_DiscardUnknown() {
	xxx_messageInfo_Runway.DiscardUnknown(m)
}

var xxx_messageInfo_Runway proto.InternalMessageInfo

func (m *Runway) GetRunway() int32 {
	if m != nil {
		return m.Runway
	}
	return 0
}

func (m *Runway) GetAirportName() string {
	if m != nil {
		return m.AirportName
	}
	return ""
}

func (m *Runway) GetPreCode() string {
	if m != nil {
		return m.PreCode
	}
	return ""
}

func (m *Runway) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ArrivingPlane struct {
	SrcAirport           string   `protobuf:"bytes,1,opt,name=srcAirport,proto3" json:"srcAirport,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArrivingPlane) Reset()         { *m = ArrivingPlane{} }
func (m *ArrivingPlane) String() string { return proto.CompactTextString(m) }
func (*ArrivingPlane) ProtoMessage()    {}
func (*ArrivingPlane) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{2}
}

func (m *ArrivingPlane) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArrivingPlane.Unmarshal(m, b)
}
func (m *ArrivingPlane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArrivingPlane.Marshal(b, m, deterministic)
}
func (m *ArrivingPlane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArrivingPlane.Merge(m, src)
}
func (m *ArrivingPlane) XXX_Size() int {
	return xxx_messageInfo_ArrivingPlane.Size(m)
}
func (m *ArrivingPlane) XXX_DiscardUnknown() {
	xxx_messageInfo_ArrivingPlane.DiscardUnknown(m)
}

var xxx_messageInfo_ArrivingPlane proto.InternalMessageInfo

func (m *ArrivingPlane) GetSrcAirport() string {
	if m != nil {
		return m.SrcAirport
	}
	return ""
}

func (m *ArrivingPlane) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ArrivingPlane) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ArrivingPlane) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type DepartingPlane struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Runway               int32    `protobuf:"varint,2,opt,name=runway,proto3" json:"runway,omitempty"`
	Height               int32    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	AirportName          string   `protobuf:"bytes,4,opt,name=airportName,proto3" json:"airportName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartingPlane) Reset()         { *m = DepartingPlane{} }
func (m *DepartingPlane) String() string { return proto.CompactTextString(m) }
func (*DepartingPlane) ProtoMessage()    {}
func (*DepartingPlane) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{3}
}

func (m *DepartingPlane) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartingPlane.Unmarshal(m, b)
}
func (m *DepartingPlane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartingPlane.Marshal(b, m, deterministic)
}
func (m *DepartingPlane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartingPlane.Merge(m, src)
}
func (m *DepartingPlane) XXX_Size() int {
	return xxx_messageInfo_DepartingPlane.Size(m)
}
func (m *DepartingPlane) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartingPlane.DiscardUnknown(m)
}

var xxx_messageInfo_DepartingPlane proto.InternalMessageInfo

func (m *DepartingPlane) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *DepartingPlane) GetRunway() int32 {
	if m != nil {
		return m.Runway
	}
	return 0
}

func (m *DepartingPlane) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *DepartingPlane) GetAirportName() string {
	if m != nil {
		return m.AirportName
	}
	return ""
}

type PlaneData struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CurrFuel             int32    `protobuf:"varint,2,opt,name=currFuel,proto3" json:"currFuel,omitempty"`
	MaxFuel              int32    `protobuf:"varint,3,opt,name=maxFuel,proto3" json:"maxFuel,omitempty"`
	CurrWeight           int32    `protobuf:"varint,4,opt,name=currWeight,proto3" json:"currWeight,omitempty"`
	MaxWeight            int32    `protobuf:"varint,5,opt,name=maxWeight,proto3" json:"maxWeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaneData) Reset()         { *m = PlaneData{} }
func (m *PlaneData) String() string { return proto.CompactTextString(m) }
func (*PlaneData) ProtoMessage()    {}
func (*PlaneData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{4}
}

func (m *PlaneData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaneData.Unmarshal(m, b)
}
func (m *PlaneData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaneData.Marshal(b, m, deterministic)
}
func (m *PlaneData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneData.Merge(m, src)
}
func (m *PlaneData) XXX_Size() int {
	return xxx_messageInfo_PlaneData.Size(m)
}
func (m *PlaneData) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneData.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneData proto.InternalMessageInfo

func (m *PlaneData) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *PlaneData) GetCurrFuel() int32 {
	if m != nil {
		return m.CurrFuel
	}
	return 0
}

func (m *PlaneData) GetMaxFuel() int32 {
	if m != nil {
		return m.MaxFuel
	}
	return 0
}

func (m *PlaneData) GetCurrWeight() int32 {
	if m != nil {
		return m.CurrWeight
	}
	return 0
}

func (m *PlaneData) GetMaxWeight() int32 {
	if m != nil {
		return m.MaxWeight
	}
	return 0
}

type TakeoffStatus struct {
	ErrorCode            int32    `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TakeoffStatus) Reset()         { *m = TakeoffStatus{} }
func (m *TakeoffStatus) String() string { return proto.CompactTextString(m) }
func (*TakeoffStatus) ProtoMessage()    {}
func (*TakeoffStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{5}
}

func (m *TakeoffStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TakeoffStatus.Unmarshal(m, b)
}
func (m *TakeoffStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TakeoffStatus.Marshal(b, m, deterministic)
}
func (m *TakeoffStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeoffStatus.Merge(m, src)
}
func (m *TakeoffStatus) XXX_Size() int {
	return xxx_messageInfo_TakeoffStatus.Size(m)
}
func (m *TakeoffStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeoffStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TakeoffStatus proto.InternalMessageInfo

func (m *TakeoffStatus) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type Flight struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Time                 string   `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Airport              string   `protobuf:"bytes,3,opt,name=airport,proto3" json:"airport,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Runway               int32    `protobuf:"varint,5,opt,name=runway,proto3" json:"runway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flight) Reset()         { *m = Flight{} }
func (m *Flight) String() string { return proto.CompactTextString(m) }
func (*Flight) ProtoMessage()    {}
func (*Flight) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{6}
}

func (m *Flight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flight.Unmarshal(m, b)
}
func (m *Flight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flight.Marshal(b, m, deterministic)
}
func (m *Flight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flight.Merge(m, src)
}
func (m *Flight) XXX_Size() int {
	return xxx_messageInfo_Flight.Size(m)
}
func (m *Flight) XXX_DiscardUnknown() {
	xxx_messageInfo_Flight.DiscardUnknown(m)
}

var xxx_messageInfo_Flight proto.InternalMessageInfo

func (m *Flight) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Flight) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Flight) GetAirport() string {
	if m != nil {
		return m.Airport
	}
	return ""
}

func (m *Flight) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Flight) GetRunway() int32 {
	if m != nil {
		return m.Runway
	}
	return 0
}

type PlaneHeight struct {
	Height               int32    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaneHeight) Reset()         { *m = PlaneHeight{} }
func (m *PlaneHeight) String() string { return proto.CompactTextString(m) }
func (*PlaneHeight) ProtoMessage()    {}
func (*PlaneHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{7}
}

func (m *PlaneHeight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaneHeight.Unmarshal(m, b)
}
func (m *PlaneHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaneHeight.Marshal(b, m, deterministic)
}
func (m *PlaneHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaneHeight.Merge(m, src)
}
func (m *PlaneHeight) XXX_Size() int {
	return xxx_messageInfo_PlaneHeight.Size(m)
}
func (m *PlaneHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaneHeight.DiscardUnknown(m)
}

var xxx_messageInfo_PlaneHeight proto.InternalMessageInfo

func (m *PlaneHeight) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type AirportInfo struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AirportInfo) Reset()         { *m = AirportInfo{} }
func (m *AirportInfo) String() string { return proto.CompactTextString(m) }
func (*AirportInfo) ProtoMessage()    {}
func (*AirportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{8}
}

func (m *AirportInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AirportInfo.Unmarshal(m, b)
}
func (m *AirportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AirportInfo.Marshal(b, m, deterministic)
}
func (m *AirportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirportInfo.Merge(m, src)
}
func (m *AirportInfo) XXX_Size() int {
	return xxx_messageInfo_AirportInfo.Size(m)
}
func (m *AirportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AirportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AirportInfo proto.InternalMessageInfo

func (m *AirportInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AirportInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ScreenInfo struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScreenInfo) Reset()         { *m = ScreenInfo{} }
func (m *ScreenInfo) String() string { return proto.CompactTextString(m) }
func (*ScreenInfo) ProtoMessage()    {}
func (*ScreenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{9}
}

func (m *ScreenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScreenInfo.Unmarshal(m, b)
}
func (m *ScreenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScreenInfo.Marshal(b, m, deterministic)
}
func (m *ScreenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScreenInfo.Merge(m, src)
}
func (m *ScreenInfo) XXX_Size() int {
	return xxx_messageInfo_ScreenInfo.Size(m)
}
func (m *ScreenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ScreenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ScreenInfo proto.InternalMessageInfo

func (m *ScreenInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ScreenInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AirportName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AirportName) Reset()         { *m = AirportName{} }
func (m *AirportName) String() string { return proto.CompactTextString(m) }
func (*AirportName) ProtoMessage()    {}
func (*AirportName) Descriptor() ([]byte, []int) {
	return fileDescriptor_f278bdd86b34fa07, []int{10}
}

func (m *AirportName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AirportName.Unmarshal(m, b)
}
func (m *AirportName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AirportName.Marshal(b, m, deterministic)
}
func (m *AirportName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirportName.Merge(m, src)
}
func (m *AirportName) XXX_Size() int {
	return xxx_messageInfo_AirportName.Size(m)
}
func (m *AirportName) XXX_DiscardUnknown() {
	xxx_messageInfo_AirportName.DiscardUnknown(m)
}

var xxx_messageInfo_AirportName proto.InternalMessageInfo

func (m *AirportName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "main.Empty")
	proto.RegisterType((*Runway)(nil), "main.Runway")
	proto.RegisterType((*ArrivingPlane)(nil), "main.ArrivingPlane")
	proto.RegisterType((*DepartingPlane)(nil), "main.DepartingPlane")
	proto.RegisterType((*PlaneData)(nil), "main.PlaneData")
	proto.RegisterType((*TakeoffStatus)(nil), "main.TakeoffStatus")
	proto.RegisterType((*Flight)(nil), "main.Flight")
	proto.RegisterType((*PlaneHeight)(nil), "main.planeHeight")
	proto.RegisterType((*AirportInfo)(nil), "main.AirportInfo")
	proto.RegisterType((*ScreenInfo)(nil), "main.ScreenInfo")
	proto.RegisterType((*AirportName)(nil), "main.AirportName")
}

func init() { proto.RegisterFile("torreServer.proto", fileDescriptor_f278bdd86b34fa07) }

var fileDescriptor_f278bdd86b34fa07 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xae, 0x93, 0xe0, 0x49, 0x93, 0xd2, 0x05, 0xa1, 0x28, 0x42, 0x28, 0x58, 0x42, 0xca,
	0xa1, 0x44, 0x25, 0xed, 0x89, 0x5b, 0x95, 0x52, 0x15, 0x09, 0x21, 0x94, 0x20, 0x71, 0x5e, 0xdc,
	0x4d, 0x62, 0x25, 0xd9, 0x35, 0xe3, 0x75, 0xda, 0xfc, 0x0e, 0x24, 0x7e, 0x2f, 0xda, 0x0f, 0xdb,
	0xeb, 0xa4, 0x42, 0xbd, 0xed, 0xcc, 0xec, 0x9b, 0x37, 0xfb, 0xe6, 0xd9, 0x70, 0x2a, 0x05, 0x22,
	0x9b, 0x31, 0xdc, 0x32, 0x1c, 0xa5, 0x28, 0xa4, 0x20, 0xc1, 0x86, 0x26, 0x3c, 0x6a, 0x41, 0xe3,
	0xf3, 0x26, 0x95, 0xbb, 0x48, 0x42, 0x73, 0x9a, 0xf3, 0x7b, 0xba, 0x23, 0xaf, 0xa1, 0x89, 0xfa,
	0xd4, 0xf3, 0x06, 0xde, 0xb0, 0x31, 0xb5, 0x11, 0x19, 0x40, 0x9b, 0x26, 0x98, 0x0a, 0x94, 0xdf,
	0xe8, 0x86, 0xf5, 0xfc, 0x81, 0x37, 0x0c, 0xa7, 0x6e, 0x8a, 0xf4, 0xa0, 0x95, 0x22, 0x9b, 0x88,
	0x3b, 0xd6, 0x3b, 0xd2, 0xd5, 0x22, 0x54, 0x3d, 0x97, 0x2c, 0x59, 0x2c, 0x65, 0x2f, 0x30, 0x3d,
	0x4d, 0x14, 0x2d, 0xa0, 0x73, 0x85, 0x98, 0x6c, 0x13, 0xbe, 0xf8, 0xbe, 0xa6, 0x9c, 0x91, 0xb7,
	0x00, 0x19, 0xc6, 0x57, 0xa6, 0xa9, 0x1e, 0x20, 0x9c, 0x3a, 0x19, 0x42, 0x20, 0x88, 0x55, 0x7f,
	0xc3, 0xae, 0xcf, 0xa4, 0x0b, 0x7e, 0x92, 0x5a, 0x46, 0x3f, 0x49, 0xd5, 0x1d, 0x8d, 0x36, 0x54,
	0xfa, 0x1c, 0x6d, 0xa1, 0x7b, 0xcd, 0x52, 0x8a, 0xb2, 0x64, 0x2a, 0x3a, 0x79, 0x4e, 0xa7, 0xea,
	0xe9, 0x7e, 0xed, 0xe9, 0xd5, 0xf8, 0x47, 0xee, 0xf8, 0xfb, 0x92, 0x04, 0x07, 0x92, 0x44, 0x7f,
	0x3c, 0x08, 0x35, 0xdf, 0x35, 0x95, 0xf4, 0x51, 0xce, 0x3e, 0x3c, 0x8f, 0x73, 0xc4, 0x9b, 0x9c,
	0xad, 0x2d, 0x6b, 0x19, 0x2b, 0x41, 0x37, 0xf4, 0x41, 0x97, 0x0c, 0x71, 0x11, 0x2a, 0x9d, 0xd4,
	0xad, 0x9f, 0xae, 0xa8, 0x4e, 0x86, 0xbc, 0x81, 0x70, 0x43, 0x1f, 0x6c, 0xb9, 0xa1, 0xcb, 0x55,
	0x22, 0xfa, 0x00, 0x9d, 0x1f, 0x74, 0xc5, 0xc4, 0x7c, 0x3e, 0x93, 0x54, 0xe6, 0x99, 0xba, 0xce,
	0x10, 0x05, 0x4e, 0x8a, 0xe9, 0x1a, 0xd3, 0x2a, 0x11, 0x6d, 0xa1, 0x79, 0xb3, 0xd6, 0x6d, 0x1f,
	0x7b, 0x00, 0x81, 0x40, 0x26, 0xa5, 0x21, 0xf4, 0x59, 0x0d, 0x6e, 0x55, 0x28, 0x9c, 0x40, 0xab,
	0x05, 0xca, 0x5d, 0xca, 0x8a, 0xe5, 0xa8, 0xb3, 0x23, 0x7b, 0xc3, 0x95, 0x3d, 0x7a, 0x0f, 0xed,
	0x54, 0x69, 0x77, 0x6b, 0xde, 0x54, 0x6d, 0xc1, 0xab, 0x99, 0xe8, 0x23, 0xb4, 0xad, 0x3d, 0xbe,
	0xf0, 0xb9, 0xb0, 0x76, 0xf0, 0x0e, 0xec, 0xe0, 0x3b, 0x76, 0x38, 0x07, 0x98, 0xc5, 0xc8, 0x18,
	0x7f, 0x32, 0xe2, 0x5d, 0x49, 0xa2, 0xad, 0x4e, 0x20, 0xe0, 0x6a, 0xe5, 0x56, 0x08, 0x75, 0x1e,
	0xff, 0xf5, 0x21, 0x94, 0xe2, 0x9e, 0xe1, 0xad, 0xc8, 0x24, 0xb9, 0x80, 0x2e, 0xb2, 0xdf, 0x39,
	0xcb, 0xe4, 0x57, 0xca, 0xef, 0x12, 0xbe, 0x20, 0x2f, 0x47, 0xea, 0x93, 0x1b, 0xd5, 0x0c, 0xdf,
	0x3f, 0x36, 0x49, 0xfb, 0xed, 0x5d, 0x96, 0x20, 0xbb, 0x1f, 0xf2, 0xca, 0xd4, 0xeb, 0xe6, 0x3d,
	0x40, 0x1d, 0xc7, 0x4b, 0x16, 0xaf, 0x0a, 0xcc, 0x89, 0xa9, 0x96, 0xbe, 0xeb, 0x5b, 0xe6, 0xfa,
	0xce, 0xc7, 0xd0, 0x92, 0xff, 0x25, 0x39, 0xb5, 0xf3, 0x3a, 0xda, 0x5e, 0x42, 0x27, 0xd3, 0xba,
	0x4d, 0x04, 0xe7, 0x2c, 0x96, 0xe4, 0x85, 0xb9, 0x53, 0x89, 0xb9, 0x87, 0x52, 0x62, 0x8d, 0x57,
	0x10, 0x9a, 0x3d, 0x2a, 0x5d, 0xce, 0xa1, 0xc3, 0x85, 0x4c, 0xe6, 0xbb, 0x42, 0x96, 0xda, 0x5b,
	0x0a, 0xb8, 0xbb, 0xf7, 0x33, 0x38, 0x31, 0x08, 0x33, 0x5f, 0x8e, 0x6c, 0x0f, 0xd3, 0x36, 0x91,
	0xfe, 0x91, 0x8d, 0x3f, 0x01, 0x98, 0x11, 0x35, 0xdb, 0x19, 0xb4, 0xd7, 0x49, 0x26, 0x8d, 0x7d,
	0xb3, 0x02, 0x67, 0xc2, 0x1a, 0x2e, 0x7a, 0x36, 0xf4, 0x7e, 0x35, 0xf5, 0xaf, 0xf1, 0xe2, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x1a, 0xc0, 0x92, 0x2f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TowerHostClient is the client API for TowerHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TowerHostClient interface {
	RequestLanding(ctx context.Context, in *ArrivingPlane, opts ...grpc.CallOption) (*Runway, error)
	RequestTakeoff(ctx context.Context, in *DepartingPlane, opts ...grpc.CallOption) (*Runway, error)
	CheckTakeoff(ctx context.Context, in *PlaneData, opts ...grpc.CallOption) (*TakeoffStatus, error)
	Takeoff(ctx context.Context, in *DepartingPlane, opts ...grpc.CallOption) (*AirportInfo, error)
	ScreenConnect(ctx context.Context, in *ScreenInfo, opts ...grpc.CallOption) (*AirportName, error)
}

type towerHostClient struct {
	cc *grpc.ClientConn
}

func NewTowerHostClient(cc *grpc.ClientConn) TowerHostClient {
	return &towerHostClient{cc}
}

func (c *towerHostClient) RequestLanding(ctx context.Context, in *ArrivingPlane, opts ...grpc.CallOption) (*Runway, error) {
	out := new(Runway)
	err := c.cc.Invoke(ctx, "/main.towerHost/requestLanding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerHostClient) RequestTakeoff(ctx context.Context, in *DepartingPlane, opts ...grpc.CallOption) (*Runway, error) {
	out := new(Runway)
	err := c.cc.Invoke(ctx, "/main.towerHost/requestTakeoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerHostClient) CheckTakeoff(ctx context.Context, in *PlaneData, opts ...grpc.CallOption) (*TakeoffStatus, error) {
	out := new(TakeoffStatus)
	err := c.cc.Invoke(ctx, "/main.towerHost/checkTakeoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerHostClient) Takeoff(ctx context.Context, in *DepartingPlane, opts ...grpc.CallOption) (*AirportInfo, error) {
	out := new(AirportInfo)
	err := c.cc.Invoke(ctx, "/main.towerHost/takeoff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *towerHostClient) ScreenConnect(ctx context.Context, in *ScreenInfo, opts ...grpc.CallOption) (*AirportName, error) {
	out := new(AirportName)
	err := c.cc.Invoke(ctx, "/main.towerHost/screenConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TowerHostServer is the server API for TowerHost service.
type TowerHostServer interface {
	RequestLanding(context.Context, *ArrivingPlane) (*Runway, error)
	RequestTakeoff(context.Context, *DepartingPlane) (*Runway, error)
	CheckTakeoff(context.Context, *PlaneData) (*TakeoffStatus, error)
	Takeoff(context.Context, *DepartingPlane) (*AirportInfo, error)
	ScreenConnect(context.Context, *ScreenInfo) (*AirportName, error)
}

func RegisterTowerHostServer(s *grpc.Server, srv TowerHostServer) {
	s.RegisterService(&_TowerHost_serviceDesc, srv)
}

func _TowerHost_RequestLanding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrivingPlane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerHostServer).RequestLanding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.towerHost/RequestLanding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerHostServer).RequestLanding(ctx, req.(*ArrivingPlane))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerHost_RequestTakeoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartingPlane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerHostServer).RequestTakeoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.towerHost/RequestTakeoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerHostServer).RequestTakeoff(ctx, req.(*DepartingPlane))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerHost_CheckTakeoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaneData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerHostServer).CheckTakeoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.towerHost/CheckTakeoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerHostServer).CheckTakeoff(ctx, req.(*PlaneData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerHost_Takeoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartingPlane)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerHostServer).Takeoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.towerHost/Takeoff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerHostServer).Takeoff(ctx, req.(*DepartingPlane))
	}
	return interceptor(ctx, in, info, handler)
}

func _TowerHost_ScreenConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TowerHostServer).ScreenConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.towerHost/ScreenConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TowerHostServer).ScreenConnect(ctx, req.(*ScreenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _TowerHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.towerHost",
	HandlerType: (*TowerHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestLanding",
			Handler:    _TowerHost_RequestLanding_Handler,
		},
		{
			MethodName: "requestTakeoff",
			Handler:    _TowerHost_RequestTakeoff_Handler,
		},
		{
			MethodName: "checkTakeoff",
			Handler:    _TowerHost_CheckTakeoff_Handler,
		},
		{
			MethodName: "takeoff",
			Handler:    _TowerHost_Takeoff_Handler,
		},
		{
			MethodName: "screenConnect",
			Handler:    _TowerHost_ScreenConnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "torreServer.proto",
}

// PlaneHostClient is the client API for PlaneHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaneHostClient interface {
	NotifyLanding(ctx context.Context, in *Runway, opts ...grpc.CallOption) (*PlaneHeight, error)
	NotifyDeparture(ctx context.Context, in *Runway, opts ...grpc.CallOption) (*Empty, error)
}

type planeHostClient struct {
	cc *grpc.ClientConn
}

func NewPlaneHostClient(cc *grpc.ClientConn) PlaneHostClient {
	return &planeHostClient{cc}
}

func (c *planeHostClient) NotifyLanding(ctx context.Context, in *Runway, opts ...grpc.CallOption) (*PlaneHeight, error) {
	out := new(PlaneHeight)
	err := c.cc.Invoke(ctx, "/main.planeHost/notifyLanding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planeHostClient) NotifyDeparture(ctx context.Context, in *Runway, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.planeHost/notifyDeparture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaneHostServer is the server API for PlaneHost service.
type PlaneHostServer interface {
	NotifyLanding(context.Context, *Runway) (*PlaneHeight, error)
	NotifyDeparture(context.Context, *Runway) (*Empty, error)
}

func RegisterPlaneHostServer(s *grpc.Server, srv PlaneHostServer) {
	s.RegisterService(&_PlaneHost_serviceDesc, srv)
}

func _PlaneHost_NotifyLanding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Runway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaneHostServer).NotifyLanding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.planeHost/NotifyLanding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaneHostServer).NotifyLanding(ctx, req.(*Runway))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaneHost_NotifyDeparture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Runway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaneHostServer).NotifyDeparture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.planeHost/NotifyDeparture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaneHostServer).NotifyDeparture(ctx, req.(*Runway))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlaneHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.planeHost",
	HandlerType: (*PlaneHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifyLanding",
			Handler:    _PlaneHost_NotifyLanding_Handler,
		},
		{
			MethodName: "notifyDeparture",
			Handler:    _PlaneHost_NotifyDeparture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "torreServer.proto",
}

// ScreenHostClient is the client API for ScreenHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenHostClient interface {
	ListFlights(ctx context.Context, opts ...grpc.CallOption) (ScreenHost_ListFlightsClient, error)
}

type screenHostClient struct {
	cc *grpc.ClientConn
}

func NewScreenHostClient(cc *grpc.ClientConn) ScreenHostClient {
	return &screenHostClient{cc}
}

func (c *screenHostClient) ListFlights(ctx context.Context, opts ...grpc.CallOption) (ScreenHost_ListFlightsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScreenHost_serviceDesc.Streams[0], "/main.screenHost/listFlights", opts...)
	if err != nil {
		return nil, err
	}
	x := &screenHostListFlightsClient{stream}
	return x, nil
}

type ScreenHost_ListFlightsClient interface {
	Send(*Flight) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type screenHostListFlightsClient struct {
	grpc.ClientStream
}

func (x *screenHostListFlightsClient) Send(m *Flight) error {
	return x.ClientStream.SendMsg(m)
}

func (x *screenHostListFlightsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScreenHostServer is the server API for ScreenHost service.
type ScreenHostServer interface {
	ListFlights(ScreenHost_ListFlightsServer) error
}

func RegisterScreenHostServer(s *grpc.Server, srv ScreenHostServer) {
	s.RegisterService(&_ScreenHost_serviceDesc, srv)
}

func _ScreenHost_ListFlights_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScreenHostServer).ListFlights(&screenHostListFlightsServer{stream})
}

type ScreenHost_ListFlightsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Flight, error)
	grpc.ServerStream
}

type screenHostListFlightsServer struct {
	grpc.ServerStream
}

func (x *screenHostListFlightsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *screenHostListFlightsServer) Recv() (*Flight, error) {
	m := new(Flight)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ScreenHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.screenHost",
	HandlerType: (*ScreenHostServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listFlights",
			Handler:       _ScreenHost_ListFlights_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "torreServer.proto",
}
